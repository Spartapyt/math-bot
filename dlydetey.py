from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime
import pytz
from dotenv import load_dotenv
import os

from dotenv import load_dotenv
import os

# üîê –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
print("–§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ:", os.listdir("."))
print("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:", dict(os.environ))

# ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –ü–û –ò–ú–ï–ù–ò –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
TOKEN = os.getenv("BOT_TOKEN")

if not TOKEN:
    raise RuntimeError("‚ùå –ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN. –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª .env")
# üü¢ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤.\n–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_keyboard()
    )

# üì± –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üìö –ú–æ—è –¥–æ–º–∞—à–∫–∞":
        await update.message.reply_text("üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–º–∞—à–∫—É")
    elif text == "üìÖ –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ":
        await update.message.reply_text("üìÖ –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ: –ø—è—Ç–Ω–∏—Ü–∞, 19 –∞–ø—Ä–µ–ª—è")
    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É.")

# üöÄ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()  # ‚Üê –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –≤–∞–∂–Ω–∞!

if __name__ == '__main__':
    main()

# üåê –ò–º—è Google –¢–∞–±–ª–∏—Ü—ã
GOOGLE_SHEET_NAME = os.getenv("GOOGLE_SHEET_NAME", "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–æ–º–∞—à–∫–∏_–ø—Ä–æ–±–Ω–æ–µ")

# üß™ –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚Äî —É–≤–∏–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª–∏
print(f"‚úÖ BOT_TOKEN —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {TOKEN[:10]}...")  # –ü–æ–∫–∞–∂–µ—Ç –ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤

# üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv("8236782787:AAHlUH0GXzvEQ5YrFXTwXyEkAUxVj_wY51I")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π –≤ Replit Secrets –∏–ª–∏ Render
GOOGLE_SHEET_NAME = os.getenv("–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–æ–º–∞—à–∫–∏_–ø—Ä–æ–±–Ω–æ–µ")
SHEET_PAGE_NAME = "–õ–∏—Å—Ç1"  # –∏–ª–∏ –¥—Ä—É–≥–æ–µ –∏–º—è –ª–∏—Å—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

# üïí –¢–∞–π–º–∑–æ–Ω–∞ –ú–æ—Å–∫–≤—ã
MOSCOW_TZ = pytz.timezone("Europe/Moscow")

# üß† –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–µ
def connect_google_sheets():
    scope = [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/drive"
    ]
    try:
        creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
        client = gspread.authorize(creds)
        sheet = client.open(GOOGLE_SHEET_NAME).worksheet(SHEET_PAGE_NAME)
        return sheet
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google –¢–∞–±–ª–∏—Ü–µ: {e}")
        return None

# üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø–æ username –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É
def get_student_data(sheet, username: str = None, phone: str = None):
    try:
        data = sheet.get_all_records()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return None, None, None

    for row in data:
        tg = str(row.get("–¢–ì —É—á–µ–Ω–∏–∫–∞", "")).strip().lower().lstrip("@")
        phone_cell = str(row.get("–¢–µ–ª–µ—Ñ–æ–Ω —É—á–µ–Ω–∏–∫–∞", "")).strip()

        if (username and username.lower() == tg) or (phone and phone == phone_cell):
            return (
                row.get("–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–º–∞—à–∫—É"),
                row.get("–î–µ–¥–ª–∞–π–Ω –¥–æ–º–∞—à–∫–∏"),
                row.get("–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ", "").strip()
            )
    return None, None, None

# ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_keyboard():
    keyboard = [
        [KeyboardButton("üìö –ú–æ—è –¥–æ–º–∞—à–∫–∞")],
        [KeyboardButton("üìÖ –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ")],
        [KeyboardButton("‚ÑπÔ∏è –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")],
        [KeyboardButton("üì¢ –ù–∞–ø–∏—Å–∞—Ç—å —É—á–∏—Ç–µ–ª—é")],
        [KeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# üü¢ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤.\n–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_keyboard()
    )

# üì± –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user = update.effective_user
    sheet = context.bot_data.get("sheet")  # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏–∑ bot_data

    if not sheet:
        await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    if text == "üìö –ú–æ—è –¥–æ–º–∞—à–∫–∞":
        username = user.username
        phone = None

        # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç —Ä–∞–Ω–µ–µ
        if "phone" in context.user_data:
            phone = context.user_data["phone"]

        link, deadline, _ = get_student_data(sheet, username, phone)

        if not link and not deadline:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–≤–æ—é –¥–æ–º–∞—à–∫—É. "
                "–£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç–≤–æ–π username –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —É–∫–∞–∑–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ."
            )
            return

        message = "üìö –í–æ—Ç —Ç–≤–æ—è –¥–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞:\n"
        if link:
            message += f"üîó [–û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞–Ω–∏–µ]({link})\n"
        if deadline:
            message += f"‚è∞ –°–¥–∞—Ç—å –¥–æ: *{deadline}*"

        await update.message.reply_text(message, parse_mode="Markdown")

    elif text == "üìÖ –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ":
        username = user.username
        lesson_str = None

        if "phone" in context.user_data:
            _, _, lesson_str = get_student_data(sheet, "", context.user_data["phone"])
        if not lesson_str:
            _, _, lesson_str = get_student_data(sheet, username, "")

        if lesson_str:
            await update.message.reply_text(f"*{lesson_str}*", parse_mode="Markdown")
        else:
            await update.message.reply_text("üìÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–Ω—è—Ç–∏–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.")

    elif text == "‚ÑπÔ∏è –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        info = (
            "üìå *–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n\n"
            "‚Ä¢ –ó–∞–Ω—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º\n"
            "‚Ä¢ –î–æ–º–∞—à–∫–∞ —Å–¥–∞—ë—Ç—Å—è –¥–æ 18:00\n"
            "‚Ä¢ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ‚Äî –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
        )
        await update.message.reply_text(info, parse_mode="Markdown")

    elif text == "üì¢ –ù–∞–ø–∏—Å–∞—Ç—å —É—á–∏—Ç–µ–ª—é":
        await update.message.reply_text("üì© –ù–∞–ø–∏—à–∏ —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –ø–µ—Ä–µ–¥–∞–º —É—á–∏—Ç–µ–ª—é.")

    elif text == "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã":
        faq = (
            "‚ùì *–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*\n\n"
            "1. *–ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ?* ‚Äî –ü—Ä–æ–≤–µ—Ä—å –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ¬ª.\n"
            "2. *–ö–∞–∫ —Å–¥–∞—Ç—å –¥–æ–º–∞—à–∫—É?* ‚Äî –í—ã–ø–æ–ª–Ω–∏ –∑–∞–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å —É—á–∏—Ç–µ–ª—é.\n"
            "3. *–ù–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –¥–æ–º–∞—à–∫–∞?* ‚Äî –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç–≤–æ–π username —É–∫–∞–∑–∞–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ."
        )
        await update.message.reply_text(faq, parse_mode="Markdown")

    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")

# üì± –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    phone_number = contact.phone_number
    context.user_data["phone"] = phone_number
    await update.message.reply_text(f"‚úÖ –¢–≤–æ–π –Ω–æ–º–µ—Ä {phone_number} —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

# üöÄ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω
    if not TOKEN:
        print("‚ùå –ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN. –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
        return

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = Application.builder().token(TOKEN).build()

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google –¢–∞–±–ª–∏—Ü–µ
    sheet = connect_google_sheets()
    if not sheet:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google –¢–∞–±–ª–∏—Ü–µ. –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ bot_data, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
    app.bot_data["sheet"] = sheet

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.CONTACT, handle_contact))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞

    # –ó–∞–ø—É—Å–∫
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    app.run_polling()

if __name__ == '__main__':
    main()